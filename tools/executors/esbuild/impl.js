'use strict';
var __awaiter =
  (this && this.__awaiter) ||
  function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P
        ? value
        : new P(function (resolve) {
            resolve(value);
          });
    }
    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator['throw'](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done
          ? resolve(result.value)
          : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
var __generator =
  (this && this.__generator) ||
  function (thisArg, body) {
    var _ = {
        label: 0,
        sent: function () {
          if (t[0] & 1) throw t[1];
          return t[1];
        },
        trys: [],
        ops: [],
      },
      f,
      y,
      t,
      g;
    return (
      (g = { next: verb(0), throw: verb(1), return: verb(2) }),
      typeof Symbol === 'function' &&
        (g[Symbol.iterator] = function () {
          return this;
        }),
      g
    );
    function verb(n) {
      return function (v) {
        return step([n, v]);
      };
    }
    function step(op) {
      if (f) throw new TypeError('Generator is already executing.');
      while (_)
        try {
          if (
            ((f = 1),
            y &&
              (t =
                op[0] & 2
                  ? y['return']
                  : op[0]
                  ? y['throw'] || ((t = y['return']) && t.call(y), 0)
                  : y.next) &&
              !(t = t.call(y, op[1])).done)
          )
            return t;
          if (((y = 0), t)) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (
                !((t = _.trys), (t = t.length > 0 && t[t.length - 1])) &&
                (op[0] === 6 || op[0] === 2)
              ) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
      if (op[0] & 5) throw op[1];
      return { value: op[0] ? op[1] : void 0, done: true };
    }
  };
var __spreadArray =
  (this && this.__spreadArray) ||
  function (to, from, pack) {
    if (pack || arguments.length === 2)
      for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
        }
      }
    return to.concat(ar || Array.prototype.slice.call(from));
  };
exports.__esModule = true;
var process_1 = require('process');
var builtins = require('builtin-modules');
var esbuild_1 = require('esbuild');
/**
 * Banner added to the generated bundles
 */
var banner =
  '/*\nTHIS IS A GENERATED/BUNDLED FILE BY ESBUILD\nif you want to view the source, please visit the github repository of this plugin\n*/\n';
function esbuildExecutor(options, _context) {
  return __awaiter(this, void 0, void 0, function () {
    var success, buildResult, err_1;
    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          console.info('esbuild executor');
          console.info('Options: '.concat(JSON.stringify(options, null, 2)));
          console.info('Current folder: ', (0, process_1.cwd)());
          console.info('Executing esbuild');
          success = true;
          _a.label = 1;
        case 1:
          _a.trys.push([1, 3, , 4]);
          return [
            4 /*yield*/,
            (0, esbuild_1.build)({
              banner: {
                js: banner,
              },
              entryPoints: [options.main],
              bundle: true,
              external: __spreadArray(
                [
                  'obsidian',
                  'electron',
                  '@codemirror/autocomplete',
                  '@codemirror/closebrackets',
                  '@codemirror/collab',
                  '@codemirror/commands',
                  '@codemirror/comment',
                  '@codemirror/fold',
                  '@codemirror/gutter',
                  '@codemirror/highlight',
                  '@codemirror/history',
                  '@codemirror/language',
                  '@codemirror/lint',
                  '@codemirror/matchbrackets',
                  '@codemirror/panel',
                  '@codemirror/rangeset',
                  '@codemirror/rectangular-selection',
                  '@codemirror/search',
                  '@codemirror/state',
                  '@codemirror/stream-parser',
                  '@codemirror/text',
                  '@codemirror/tooltip',
                  '@codemirror/view',
                ],
                builtins,
                true
              ),
              format: options.outputFormat,
              watch: options.watchMode,
              target: options.outputTarget,
              logLevel: options.logLevel,
              sourcemap: options.sourceMap,
              treeShaking: true,
              outfile: ''
                .concat(options.outputPath, '/')
                .concat(options.outputFile),
            }),
          ];
        case 2:
          buildResult = _a.sent();
          console.info('esbuild results');
          console.info('Warnings: ', buildResult.warnings);
          console.info('Errors: ', buildResult.errors);
          return [3 /*break*/, 4];
        case 3:
          err_1 = _a.sent();
          success = false;
          console.error('esbuild failed: ', err_1);
          return [3 /*break*/, 4];
        case 4:
          return [2 /*return*/, { success: success }];
      }
    });
  });
}
exports['default'] = esbuildExecutor;
