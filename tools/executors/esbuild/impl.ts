import type { ExecutorContext } from '@nrwl/devkit';
import { cwd } from 'process';
import * as builtins from 'builtin-modules';
import { build, Format, LogLevel } from 'esbuild';

/**
 * Banner added to the generated bundles
 */
const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

export interface ESBuildExecutorOptions {
  logLevel: LogLevel;
  outputPath: string;
  outputFile: string;
  outputFormat: Format;
  outputTarget: string | string[];
  main: string;
  sourceMap: boolean;
  tsConfig: string;
  watchMode: boolean;
}

export default async function esbuildExecutor(
  options: ESBuildExecutorOptions,
  _context: ExecutorContext
): Promise<{ success: boolean }> {
  if (options.logLevel === 'verbose') {
    console.info('esbuild executor');
    console.info(`Options: ${JSON.stringify(options, null, 2)}`);
    console.info('Current folder: ', cwd());
    console.info(`Executing esbuild`);
  }
  let success = true;
  try {
    const buildResult = await build({
      banner: {
        js: banner,
      },
      entryPoints: [options.main],
      bundle: true,
      external: [
        'obsidian',
        'electron',
        '@codemirror/autocomplete',
        '@codemirror/closebrackets',
        '@codemirror/collab',
        '@codemirror/commands',
        '@codemirror/comment',
        '@codemirror/fold',
        '@codemirror/gutter',
        '@codemirror/highlight',
        '@codemirror/history',
        '@codemirror/language',
        '@codemirror/lint',
        '@codemirror/matchbrackets',
        '@codemirror/panel',
        '@codemirror/rangeset',
        '@codemirror/rectangular-selection',
        '@codemirror/search',
        '@codemirror/state',
        '@codemirror/stream-parser',
        '@codemirror/text',
        '@codemirror/tooltip',
        '@codemirror/view',
        ...builtins,
      ],
      format: options.outputFormat,
      watch: options.watchMode,
      target: options.outputTarget,
      logLevel: options.logLevel,
      sourcemap: options.sourceMap,
      treeShaking: true,
      outfile: `${options.outputPath}/${options.outputFile}`,
    });
    if (options.logLevel === 'verbose') {
      console.info('esbuild results');
      console.info('Warnings: ', buildResult.warnings);
      console.info('Errors: ', buildResult.errors);
    }
  } catch (err) {
    success = false;
    console.error('esbuild failed: ', err);
  }

  return { success };
}
